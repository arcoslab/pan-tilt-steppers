##
## Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>
## Copyright (C) 2010 Piotr Esden-Tempski <piotr@esden.net>
## Copyright (C) 2011 Fergus Noble <fergusnoble@gmail.com>
## Copyright (C) 2017 Ariel Mora <ariel.moraj@gmail.com>
##
## This library is free software: you can redistribute it and/or modify
## it under the terms of the GNU Lesser General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This library is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with this library.  If not, see <http://www.gnu.org/licenses/>.
##

PREFIX	?= arm-none-eabi
CC		= $(PREFIX)-gcc
LD		= $(PREFIX)-gcc
OBJCOPY		= $(PREFIX)-objcopy
OBJDUMP		= $(PREFIX)-objdump
GDB		= $(PREFIX)-gdb
FLASH		= $(shell which st-flash)

BOARD = $(shell echo $(OOCD_BOARD) | sed 's/discovery$$//')
TOOLCHAIN_DEFINE = $(shell echo $(BOARD) | tr [a-z] [A-Z])

TOOLCHAIN_STATIC_LIB = libopencm3_$(BOARD).a
TOOLCHAIN_STATIC_INCLUDE = opencm3_$(BOARD)

TOOLCHAIN_DIR ?= ../libopencm3
ifeq ($(wildcard ../libopencm3/lib/$(TOOLCHAIN_STATIC_LIB)),)
ifneq ($(strip $(shell which $(CC))),)
TOOLCHAIN_DIR := $(shell dirname `which $(CC)`)/../$(PREFIX)
endif
else
ifeq ($(V),1)
$(info We seem to be building the example in the source directory. Using local library!)
endif
endif

$(info tool $(TOOLCHAIN_DIR))

LIBOPENCM3_PLUS_STATIC_LIB = libopencm3_plus_$(OOCD_BOARD).a
LIBOPENCM3_PLUS_STATIC_INCLUDE = opencm3_plus_$(OOCD_BOARD)

LIBOPENCM3_PLUS ?= ../libopencm3-plus
ifeq ($(wildcard ../libopencm3-plus/lib/$(LIBOPENCM3_PLUS_STATIC_LIB)),)
ifneq ($(strip $(shell which $(CC))),)
LIBOPENCM3_PLUS := $(shell dirname `which $(CC)`)/../$(PREFIX)
endif
else
ifeq ($(V),1)
$(info We seem to be building the example in the source directory. Using local library!)
endif
endif

$(info plus $(LIBOPENCM3_PLUS))

LIBS_INCLUDE_DIR = -I$(TOOLCHAIN_DIR)/include -I$(LIBOPENCM3_PLUS)/include
LIBS_LD_DIR = -L$(TOOLCHAIN_DIR)/lib/stm32/f4 -L$(LIBOPENCM3_PLUS)/lib
LIBS_STATIC_LIB = $(TOOLCHAIN_DIR)/lib/$(TOOLCHAN_STATIC_LIB) $(LIBOPENCM3_PLUS)/lib/$(LIBOPENCM3_PLUS_STATIC_LIB)
LIBS_STATIC_INCLUDE = -l$(LIBOPENCM3_PLUS_STATIC_INCLUDE) -l$(TOOLCHAIN_STATIC_INCLUDE)

CFLAGS		+= -Os -g -std\=c99\
		   -Wall -Wextra -Wimplicit-function-declaration \
		   -Wredundant-decls -Wmissing-prototypes -Wstrict-prototypes \
		   -Wundef -Wshadow \
		   $(LIBS_INCLUDE_DIR) -I../include\
		   -fno-common -mcpu=cortex-m4 -mthumb \
		   -mfloat-abi=hard -mfpu=fpv4-sp-d16 -MD -D$(TOOLCHAIN_DEFINE)
LDSCRIPT	?= $(BINARY).ld
LDFLAGS		+= --static -lc -lm -lnosys -L$(TOOLCHAIN_DIR)/lib \
			 $(LIBS_LD_DIR)\
		   -T$(LDSCRIPT) -nostartfiles -Wl,--gc-sections \
		   -mthumb -mcpu=cortex-m4 -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16
OBJS		= $(SRC:.c=.o)
OBJS		+= $(BINARY).o
CLEAN		+= $(OBJS) $(OBJS:.o=.d)

OOCD		?= openocd
OOCD_INTERFACE	?= flossjtag
OOCD_BOARD	?= olimex_stm32_h103
# Black magic probe specific variables
# Set the BMP_PORT to a serial port and then BMP is used for flashing
BMP_PORT        ?=

# Be silent per default, but 'make V=1' will show all compiler calls.
ifneq ($(V),1)
Q := @
NULL := 2>/dev/null
else
LDFLAGS += -Wl,--print-gc-sections
endif

.SUFFIXES: .elf .bin .hex .srec .list .images
.SECONDEXPANSION:
.SECONDARY:

all: images

images: $(BINARY).images
flash: $(BINARY).flash

%.images: %.bin %.hex %.srec %.list
	@#echo "*** $* images generated ***"

%.bin: %.elf
	@#printf "  OBJCOPY $(*).bin\n"
	$(Q)$(OBJCOPY) -Obinary $(*).elf $(*).bin

%.hex: %.elf
	@#printf "  OBJCOPY $(*).hex\n"
	$(Q)$(OBJCOPY) -Oihex $(*).elf $(*).hex

%.srec: %.elf
	@#printf "  OBJCOPY $(*).srec\n"
	$(Q)$(OBJCOPY) -Osrec $(*).elf $(*).srec

%.list: %.elf
	@#printf "  OBJDUMP $(*).list\n"
	$(Q)$(OBJDUMP) -S $(*).elf > $(*).list

%.elf: $(OBJS) $(LDSCRIPT) $(LIBS_STATIC_LIB)
	@#printf "  LD      $(subst $(shell pwd)/,,$(@))\n"
	$(Q)$(LD) -o $(*).elf $(OBJS) $(LIBS_STATIC_INCLUDE) $(LDFLAGS)

%.o: %.c Makefile
	@#printf "  CC      $(subst $(shell pwd)/,,$(@))\n"
	$(Q)$(CC) $(CFLAGS) -o $@ -c $<

clean:
	$(Q)rm -f *.o
	$(Q)rm -f *.d
	$(Q)rm -f *.elf
	$(Q)rm -f *.bin
	$(Q)rm -f *.hex
	$(Q)rm -f *.srec
	$(Q)rm -f *.list
	$(Q)rm -f $(CLEAN)

%.stlink-flash: %.bin
	@printf "  FLASH  $<\n"
	$(Q)$(FLASH) write $(*).bin 0x8000000

	
ifeq ($(BMP_PORT),)
ifeq ($(OOCD_SERIAL),)
%.flash: %.hex
	@printf "  FLASH   $<\n"
	@# IMPORTANT: Don't use "resume", only "reset" will work correctly!
	$(Q)$(OOCD) -f interface/$(OOCD_INTERFACE).cfg \
		    -f board/$(OOCD_BOARD).cfg \
		    -c "init" -c "reset init" \
		    -c "flash write_image erase $(*).hex" \
		    -c "reset" \
		    -c "shutdown" $(NULL)
else
%.flash: %.hex
	@printf "  FLASH   $<\n"
	@# IMPORTANT: Don't use "resume", only "reset" will work correctly!
	$(Q)$(OOCD) -f interface/$(OOCD_INTERFACE).cfg \
		    -f board/$(OOCD_BOARD).cfg \
		    -c "ft2232_serial $(OOCD_SERIAL)" \
		    -c "init" -c "reset init" \
		    -c "stm32x mass_erase 0" \
		    -c "flash write_image $(*).hex" \
		    -c "reset" \
		    -c "shutdown" $(NULL)
endif
else
%.flash: %.elf
	@echo "  GDB   $(*).elf (flash)"
	$(Q)$(GDB) --batch \
		   -ex 'target extended-remote $(BMP_PORT)' \
		   -x $(TOOLCHAIN_DIR)/scripts/black_magic_probe_flash.scr \
		   $(*).elf
endif

.PHONY: images clean

-include $(OBJS:.o=.d)

